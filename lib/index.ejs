<!DOCTYPE html>
<%=
((input) => {
  const generator = require('../lib/generator');
  const options = input ? input.options || {} : {};
  const files = input ? input.files || {} : {};
  const data = {
    html: {
      lang: options.lang,
      manifest: options.manifest,
      dir: options.dir,
      innerHTML: {
        head: {
          innerHTML: options.head || {}
        },
        body: {
          innerHTML: options.body || {}
        }
      }
    }
  };

  const iterate = (data, search) => {
    switch (Object.prototype.toString.call(data)) {
      case '[object Array]':
        return data.some(item => iterate(item, search) === true)
      case '[object Object]':
        return Object.keys(data).map(key => {
          if (key === search) {
            return true
          } else {
            return iterate(data[key], search)
          }
        }).some(item => item === true)
      default:
        return false
    }
  }

  const inject = (data, search, hook) => !iterate(data, search) && hook()

  files.css && inject(data, 'cssChunks', () => {
    data.html.innerHTML.head.innerHTML = [data.html.innerHTML.head.innerHTML, {cssChunks: true}]
  })

  files.chunks && inject(data, 'jsChunks', () => {
    data.html.innerHTML.body.innerHTML = [data.html.innerHTML.body.innerHTML, {jsChunks: true}]
  })

  return generator(data, {
    cssChunks: (data) => {
      switch (data) {
        case true:
          return files.css.map(href => ({
              link: {
                rel: 'stylesheet',
                href: href
              }
            })
          )
      }
    },
    jsChunks: (data) => {
      switch (data) {
        case true:
          return Object.values(files.chunks).map(item => ({
              script: {
                src: item.entry
              }
            })
          )
      }
    },
    window: (data) => {
      return Object.keys(data).length > 0 ? {
        script: {
          innerHTML: Object.keys(data).map(key => `window['${key}'] = ${data[key]};`).join('\n')
        }
      } : null
    }
  });
})(htmlWebpackPlugin || {})
%>
